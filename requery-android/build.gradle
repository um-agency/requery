buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 28
    buildToolsVersion "$android_buildtools_version"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules.pro'
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    implementation project(':requery')
    implementation 'androidx.sqlite:sqlite:2.0.0'
    implementation "androidx.recyclerview:recyclerview:$androidx_version"
    implementation 'net.zetetic:android-database-sqlcipher:4.0.1'
    implementation 'io.requery:sqlite-android:3.25.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation project(':requery-test')
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.multidex:multidex:2.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

publish.dependsOn 'assembleRelease'
bintrayUpload.dependsOn 'assembleRelease'

android.libraryVariants
publishing {
    publications {
        maven(MavenPublication) {
            // leaving out dependencies (components.java) intentionally
            groupId rootProject.group
            artifactId project.name
            version rootProject.version
            artifact getReleaseArtifact()
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                asNode().children().last() + project.pomXml
            }
        }
    }

    repositories {
        maven {
            credentials {
                username = bintray.user
                password = bintray.key
            }
            url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
        }
    }
}

def getReleaseArtifact() {
    return "build/outputs/aar/${project.name}-release.aar"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
repositories {
    mavenCentral()
}
